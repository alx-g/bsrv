[logging]
# logging target, select one:
#  file:     rotating file log + stdout
#  journald: log to journald + stdout
#  stdout:   log to stdout only
target: stdout

# if logging target is "file", this specifies the log file name
path: ./var/log/borgsrvd.log

# if logging target is "file", this specifies the number of days old logs should be kept
max_logfiles: 7

# set log level, options are CRITCAL, ERROR, WARNING, INFO, DEBUG
log_level: debug

[borg]
# Set BORG_BASE_DIR, where borg places the its cache and security info (e.g. nonces)
base_dir: ./var/borgsrv

# Jobs are defined using a section starting with the dollar ($) symbol.
[$test]

# Set borg repository path (may include ssh://)
borg_repo: /home/alex/test/borg_target

# Passphrase for given repository
borg_passphrase: 123456

# Arguments to supply when calling borg create
# This normally consists of a list of directories and some exclusions, e.g. with --exclude or --exclude-caches, see
# borg manual for more info.
borg_create_args: /home/alex/test/auto1 --exclude-caches

# Arguments to supply when calling borg prune
# This defines, how many backups to keep, also see borg manual for more info.
borg_prune_args: --keep-minutely 10

# Schedule definition for this Job.
# The syntax somewhat loosely follows crontab notation. Here are some examples for valid schedules:
#
# Method 1: Aliases
#  @weekly      -> Run as soon as last archive lies back more than 1 week
#  @daily       -> Run as soon as last archive lies back more than 1 day
#  @hourly      -> Run as soon as last archive lies back more than 1 hour
#
# Method 2: @every
#  @every 1minute                           -> Run as soon as last archive lies back more than 1 minute
#  @every 1 week 1 day 1 hour 1 minute      -> Run as soon as last archive lies back more than 1 week, 1 day, 1 hour, and 1 minute
#  @every 1w1d1h1m                          -> Same thing
#  @every 2 hours                           -> Run as soon as last archive lies back more than 2 hours
#
# Method 3: Column notation:
#   minute  hour    day(month)  month   day(week)
#   *       *       *           *       *           -> Run every minute
#   *       *       1           1       *           -> Run every minute on January 1st
#   0       *       *           *       *           -> Run every full hour
#   */10    *       *           *       *           -> Run when minutes divisible by 10
#   0       8       */10        *       *           -> Run when (day of month)-1 divisible by 10 and time is 8:00
#   0       6       *           */2     0           -> Run when month-1 is divisible by 2, weekday is sunday and time is 6:00
#   0       8-15    *           *       *           -> Run every day at 8:00,9:00,10:00,11:00,12:00,13:00,14:00, and 15:00
schedule: @every 1h
